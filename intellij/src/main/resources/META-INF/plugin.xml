<idea-plugin>
    <id>com.logicalclocks.hops-intellij</id>
    <name>Hopsworks</name>
    <vendor email="info@logicalclocks.com" url="https://www.hopsworks.ai/">Hopsworks AB</vendor>

    <description>
        <![CDATA[
        <p>Plugin to interact with your Hopsworks cluster. Develop locally in your Intellij IDE and execute job actions directly on your Hopsworks cluster.
        Read more about Jobs on <a href="https://hopsworks.readthedocs.io/en/stable/user_guide/hopsworks/jobs.html#hopsworks-ide-plugin">Hopsworks Docs</a>
        </p>
        <h4 id="usage">Usage</h4>
        <ul>
        <li>Open the <b>Hopsworks Job Preferences</b> UI for specifying user preferences under <b>Settings -&gt; Tools -&gt; Hopsworks Job Preferences</b>. </li>
        <li>Input the Hopsworks project preferences and job details you wish to work on. </li>
        <li>Open a Project and within the Project Explorer right click on the program ( .jar, .py, .ipynb) you wish to execute as a job on Hopsworks. Different job actions possible are available in the context menu  ( Create, Run, Stop, etc.) </li>
        <ul>
        <li><strong>Note:</strong> The Job Type <code>Python</code> only supports Hopsworks-EE </li>
        </ul>
        <h5 id="actions">Actions</h5>
        <ul>
        <li><strong>Create:</strong> Create or update job as specified in Hopsworks Job Preferences</li>
        <li><strong>Run:</strong> Uploads the program first to the HDFS path as specified and runs job </li>
        <li><strong>Stop:</strong> Stops a job</li>
        <li><strong>Job Execution Status / Job Execution Logs:</strong> Get the job status or logs respectively. You have the option of retrieving a particular job execution by specifying the execution id in the &#39;Hopsworks Job Preferences&#39; UI, otherwise default is the last execution for the job name specified. </li>
        </ul>
        <h5 id="support-for-running-flink-jobs">Support for running Flink jobs</h5>
        <ul>
        <li>You can also submit your local program as a flink job using the plugin. Follow the steps to <code>Create Job</code> to first create a flink job in Hopsworks.</li>
        <li>Then click on <code>Run Job</code>. This will first start a flink cluster if there is no active running flink job with same job name. Otherwise it will use an active running flink cluster with same job name.
        Next it will upload and submit your program to a running flink cluster.</li>
        <li>Set your program main class using the <code>Main Class</code> field in preferences. To pass arguments, simply fill it in the <code>User Arguments</code>, multiple arguments separated by space. e.g. --arg1 a1 --arg2 a2</li>
        </ul>
        </ul>
        ]]>
    </description>
    <!-- please see https://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html
         on how to target different products -->
    <depends>com.intellij.modules.platform</depends>

    <extensions defaultExtensionNs="com.intellij">
        <!-- Add your extensions here -->
        <projectConfigurable groupId="tools"
                             displayName="Hopsworks Job Preferences"
                             instance="com.logicalclocks.HopsSettingsConfigurable" />
        <notificationGroup id="Hopsworks Notification" displayType="BALLOON" />
    </extensions>

    <actions>
        <action id="createJob" class="com.logicalclocks.actions.HopsCreateJob" text="Create Hopsworks Job">
            <add-to-group group-id="ProjectViewPopupMenuRunGroup" anchor="first" />
        </action>
        <action id="jobRun" class="com.logicalclocks.actions.HopsRunJob" text="Run Hopsworks Job">
            <add-to-group group-id="ProjectViewPopupMenuRunGroup" anchor="after" relative-to-action="createJob"/>
        </action>
        <action id="jobStop" class="com.logicalclocks.actions.HopsStopJob" text="Stop Hopsworks Job">
            <add-to-group group-id="ProjectViewPopupMenuRunGroup" anchor="after" relative-to-action="jobRun"/>
        </action>
        <action id="jobStatus" class="com.logicalclocks.actions.HopsJobStatus" text="Job Execution Status">
            <add-to-group group-id="ProjectViewPopupMenuRunGroup" anchor="after" relative-to-action="jobRun"/>
        </action>
        <action id="jobLogs" class="com.logicalclocks.actions.HopsJobLogs" text="Job Execution Logs">
            <add-to-group group-id="ProjectViewPopupMenuRunGroup" anchor="after" relative-to-action="jobStatus"/>
        </action>
    </actions>

</idea-plugin>
